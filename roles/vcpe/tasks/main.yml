---
# file: roles/vcpe/tasks/main.yml
#

- name: Ensure virtualization service is started
  service:
    name: libvirtd
    state: started
  notify:
    - Enable virtualization service

- name: Wait until virtualization service is initialized
  wait_for:
    path: /var/run/libvirt/libvirt-sock

- name: Delete existing LAN bridge
  command: brctl delbr {{ interface_bridge_lan }}
  ignore_errors: yes

- name: Create LAN bridge
  command: "{{ item }}"
  with_items:
    - brctl addbr {{ interface_bridge_lan }}
    - brctl stp {{ interface_bridge_lan }} on
    
- name: Add interfaces to LAN bridge
  command: brctl addif {{ interface_bridge_lan }} {{ item }}
  with_items: "{{ interfaces_ethernet_bridge_lan }}"

- name: Upload virtual router image
  copy:
    src: "files/{{ router_version }}.qcow2.tar.gz"
    dest: "{{ upload_directory }}/"
    remote_src: no
    force: no
  when: preloaded == "no"

- name: Unarchive virtual router image
  unarchive:
    src: "{{ upload_directory }}/{{ router_version }}.qcow2.tar.gz"
    dest: "{{ upload_directory }}/"
    remote_src: yes
    force: no
  when: preloaded == "no"

- name: Deploy virtual router image
  command: mv {{ upload_directory }}/{{ router_version }}.qcow2 /var/lib/libvirt/images/{{ router_version }}.qcow2
  when: preloaded == "no"
    
- name: Upload virtual router definition
  template:
    src: "{{ router_version }}.xml.j2"
    dest: "{{ upload_directory}}/{{ router_version }}.xml"
    remote_src: no
    force: yes

- name: Define the virtual router
  virt:
    command: define
    name: "{{ router_hostname }}"
    xml: "{{ lookup('template', '{{ router_version }}.xml.j2') }}"

- name: Start the virtual router
  virt:
    name: "{{ router_hostname }}"
    state: running
  register: router_running
 
- name: Show the results
  debug:
    var: router_running
